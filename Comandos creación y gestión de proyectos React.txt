// Descargar e instalar Node.js

// Permitir ejecuci√≥n de scripts. Ejecutar en power Shell como administrador
set-executionpolicy unrestricted

// Crear proyecto con Vite
npm create vite@latest helloworld

// Continuamos instalando las librerias b√°sicas de react
cd helloworld
npm install

// Ejecutar proyecto
npm run dev

// Desactivar warning linter en eslint.config.js
rules: {

 'react/prop-types': 'off', // Desactiva la validaci√≥n de PropTypes

}
---------------------------------------------------------------------
MUI 
// Instalaci√≥n de MUI
npm install @mui/material @emotion/react @emotion/styled

// Instalaci√≥n de Roboto
npm install @fontsource/roboto

// Importaci√≥n en App.jsx
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';

/// Instalacion de iconos
npm install @mui/icons-material
-------------------------------------------------
MDBootstrap

// Instalaci√≥n de MDBootstrap
npm i mdb-react-ui-kit

// Intalaci√≥n de fontawesome
npm i @fortawesome/fontawesome-free

// Importaci√≥n de css
import 'mdb-react-ui-kit/dist/css/mdb.min.css';
import "@fortawesome/fontawesome-free/css/all.min.css";

// Importaci√≥n de Roboto en index.html
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />

// Establecer fuente en index.css
body {
  font-family: Roboto, Helvetica, Arial, sans-serif;
}

--------------------------------------------------------------------

// Instalar React Router 
npm i react-router

// Renderizar <BrowserRouter> en la aplicaci√≥n

import {
  createBrowserRouter,
  RouterProvider,
} from "react-router";


let router = createBrowserRouter([
  {
    path: "/",
    Component: Root,
    children: [
      {
        path: "shows/:showId",
        element: <Show />
      },
    ],
  },
]);

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>
);

--------------------------------------------------------------
Zustand - Gesti√≥n del estado de la aplicaci√≥n
Zustand es una biblioteca de gesti√≥n de estado para aplicaciones en React. Se destaca por ser m√°s simple y ligera en comparaci√≥n con Redux, evitando la complejidad del boilerplate y ofreciendo una API m√°s intuitiva basada en hooks.
üìå Principales caracter√≠sticas de Zustand

‚úÖ Ligero y sin boilerplate: No necesitas configurar reducers ni actions.
‚úÖ R√°pido y eficiente: Usa un sistema de suscripci√≥n optimizado para evitar renders innecesarios.
‚úÖ Basado en hooks: Usa useStore para acceder al estado de forma sencilla.
‚úÖ Persistencia y middlewares: Soporta persistencia en localStorage y middlewares como logs o sincronizaci√≥n con el backend.
‚úÖ Sin Provider: No requiere un Provider en el √°rbol de componentes como Redux.
üöÄ Ejemplo b√°sico con Zustand

üìå 1Ô∏è‚É£ Instalaci√≥n

npm install zustand

-----------------------------------------------
Recharts
Librer√≠a para crear gr√°ficas

npm install recharts

------------------------------------------------
Impresi√≥n de pdf a partir de HTML como im√°gen
jsPDF + html2canvas

npm i html2canvas jspdf

Ver c√≥digo de src/utils/generatePDF.js

-------------------------------------------
Impresi√≥n de pdf dise√±ando el informe
react-pdf

npm install @react-pdf/renderer --save

-------------------------------------------

// Instalar las siguientes extensiones en VSCode:
ESLint: un linter, que es una herramienta que detecta errores en el c√≥digo.
Babel Javascript: resalta la sintaxis de React.js
Error Lens: detecta y muestra errores de JS
Live Server: servidor local de pruebas (no necesario en desarrollo con React)
html to JSX: convierte HTML en JSX
XML Tools (opcional)
vscode-icons (opcional)
Prettier, un formateador de c√≥digo (opcional, √∫til en React)
IntelliSense for CSS class names in HTML
npm Intelisense (autocompleta importaciones)

